import { type TurboModule } from "react-native";
import type { Int32, UnsafeObject } from "react-native/Libraries/Types/CodegenTypesNamespace";
export interface Spec extends TurboModule {
    addListener: (eventType: string) => void;
    removeListeners: (id: Int32) => void;
    setupPlayer(options: UnsafeObject): Promise<void>;
    updateOptions(options: UnsafeObject): Promise<void>;
    isServiceRunning(): Promise<boolean>;
    destroy(): void;
    add(tracks: UnsafeObject[], beforeIndex: Int32): Promise<void>;
    move(index: Int32, newIndex: Int32): Promise<void>;
    remove(indexes: Int32[]): Promise<void>;
    removeUpcomingTracks(): Promise<void>;
    shuffle(): Promise<void>;
    getDownload(id: string): Promise<UnsafeObject | null>;
    addDownloads(requests: UnsafeObject[]): Promise<void>;
    removeDownload(id: string): Promise<void>;
    getCurrentDownloads(): Promise<UnsafeObject[]>;
    getDownloads(): Promise<UnsafeObject[]>;
    getDownloadsPaused(): Promise<boolean>;
    clearDownloads(): Promise<void>;
    toggleDownloadsPaused(): Promise<void>;
    resumeDownloads(): Promise<void>;
    pauseDownloads(): Promise<void>;
    skip(index: Int32): Promise<void>;
    skipToNext(): Promise<void>;
    skipToPrevious(): Promise<void>;
    reset(): Promise<void>;
    clear(): Promise<void>;
    play(): Promise<void>;
    pause(): Promise<void>;
    stop(): Promise<void>;
    seekTo(position: number): Promise<void>;
    setRepeatMode(mode: Int32): Promise<void>;
    getRepeatMode(): Promise<Int32>;
    setShuffleModeEnabled(enabled: boolean): Promise<void>;
    getShuffleModeEnabled(): Promise<boolean>;
    setPlaybackParameters(speed: Int32, pitch: Int32): Promise<void>;
    getPlaybackParameters(): Promise<UnsafeObject>;
    setPlaybackSpeed(speed: number): Promise<void>;
    getPlaybackSpeed(): Promise<number>;
    setPlaybackPitch(pitch: number): Promise<void>;
    getPlaybackPitch(): Promise<number>;
    setVolume(volume: number): Promise<void>;
    getVolume(): Promise<number>;
    getTrack(index: Int32): Promise<UnsafeObject | null>;
    getQueue(): Promise<UnsafeObject[]>;
    getCurrentTrack(): Promise<Int32 | null>;
    getDuration(): Promise<number>;
    getBufferedPosition(): Promise<number>;
    getPosition(): Promise<number>;
    getState(): Promise<Int32>;
    hasNext(): Promise<boolean>;
    hasPrevious(): Promise<boolean>;
    setDownloadHeaders(headers: UnsafeObject): Promise<void>;
    updateMetadataForTrack(index: Int32, metadata: UnsafeObject): Promise<void>;
    clearNowPlayingMetadata(): Promise<void>;
    updateNowPlayingMetadata(metadata: UnsafeObject): Promise<void>;
    getConstants: () => {
        readonly STATE_NONE: Int32;
        readonly STATE_READY: Int32;
        readonly STATE_PLAYING: Int32;
        readonly STATE_PAUSED: Int32;
        readonly STATE_STOPPED: Int32;
        readonly STATE_BUFFERING: Int32;
        readonly STATE_CONNECTING: Int32;
        readonly PITCH_ALGORITHM_LINEAR: Int32;
        readonly PITCH_ALGORITHM_MUSIC: Int32;
        readonly PITCH_ALGORITHM_VOICE: Int32;
        readonly CAPABILITY_PLAY: Int32;
        readonly CAPABILITY_PLAY_FROM_ID: Int32;
        readonly CAPABILITY_PLAY_FROM_SEARCH: Int32;
        readonly CAPABILITY_PAUSE: Int32;
        readonly CAPABILITY_STOP: Int32;
        readonly CAPABILITY_SEEK_TO: Int32;
        readonly CAPABILITY_SKIP: Int32;
        readonly CAPABILITY_SKIP_TO_NEXT: Int32;
        readonly CAPABILITY_SKIP_TO_PREVIOUS: Int32;
        readonly CAPABILITY_SET_RATING: Int32;
        readonly CAPABILITY_JUMP_FORWARD: Int32;
        readonly CAPABILITY_JUMP_BACKWARD: Int32;
        readonly CAPABILITY_LIKE: Int32;
        readonly CAPABILITY_DISLIKE: Int32;
        readonly CAPABILITY_BOOKMARK: Int32;
        readonly REPEAT_OFF: Int32;
        readonly REPEAT_TRACK: Int32;
        readonly REPEAT_QUEUE: Int32;
        readonly RATING_HEART: Int32;
        readonly RATING_THUMBS_UP_DOWN: Int32;
        readonly RATING_3_STARS: Int32;
        readonly RATING_4_STARS: Int32;
        readonly RATING_5_STARS: Int32;
        readonly RATING_PERCENTAGE: Int32;
        readonly DOWNLOAD_STATE_QUEUED: Int32;
        readonly DOWNLOAD_STATE_STOPPED: Int32;
        readonly DOWNLOAD_STATE_DOWNLOADING: Int32;
        readonly DOWNLOAD_STATE_COMPLETED: Int32;
        readonly DOWNLOAD_STATE_FAILED: Int32;
        readonly DOWNLOAD_STATE_REMOVING: Int32;
        readonly DOWNLOAD_STATE_RESTARTING: Int32;
    };
}
declare const module: Spec;
export declare const Constants: {
    readonly STATE_NONE: Int32;
    readonly STATE_READY: Int32;
    readonly STATE_PLAYING: Int32;
    readonly STATE_PAUSED: Int32;
    readonly STATE_STOPPED: Int32;
    readonly STATE_BUFFERING: Int32;
    readonly STATE_CONNECTING: Int32;
    readonly PITCH_ALGORITHM_LINEAR: Int32;
    readonly PITCH_ALGORITHM_MUSIC: Int32;
    readonly PITCH_ALGORITHM_VOICE: Int32;
    readonly CAPABILITY_PLAY: Int32;
    readonly CAPABILITY_PLAY_FROM_ID: Int32;
    readonly CAPABILITY_PLAY_FROM_SEARCH: Int32;
    readonly CAPABILITY_PAUSE: Int32;
    readonly CAPABILITY_STOP: Int32;
    readonly CAPABILITY_SEEK_TO: Int32;
    readonly CAPABILITY_SKIP: Int32;
    readonly CAPABILITY_SKIP_TO_NEXT: Int32;
    readonly CAPABILITY_SKIP_TO_PREVIOUS: Int32;
    readonly CAPABILITY_SET_RATING: Int32;
    readonly CAPABILITY_JUMP_FORWARD: Int32;
    readonly CAPABILITY_JUMP_BACKWARD: Int32;
    readonly CAPABILITY_LIKE: Int32;
    readonly CAPABILITY_DISLIKE: Int32;
    readonly CAPABILITY_BOOKMARK: Int32;
    readonly REPEAT_OFF: Int32;
    readonly REPEAT_TRACK: Int32;
    readonly REPEAT_QUEUE: Int32;
    readonly RATING_HEART: Int32;
    readonly RATING_THUMBS_UP_DOWN: Int32;
    readonly RATING_3_STARS: Int32;
    readonly RATING_4_STARS: Int32;
    readonly RATING_5_STARS: Int32;
    readonly RATING_PERCENTAGE: Int32;
    readonly DOWNLOAD_STATE_QUEUED: Int32;
    readonly DOWNLOAD_STATE_STOPPED: Int32;
    readonly DOWNLOAD_STATE_DOWNLOADING: Int32;
    readonly DOWNLOAD_STATE_COMPLETED: Int32;
    readonly DOWNLOAD_STATE_FAILED: Int32;
    readonly DOWNLOAD_STATE_REMOVING: Int32;
    readonly DOWNLOAD_STATE_RESTARTING: Int32;
};
export default module;
//# sourceMappingURL=NativeTrackPlayer.d.ts.map